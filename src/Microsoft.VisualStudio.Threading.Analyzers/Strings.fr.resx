<?xml version="1.0" encoding="utf-8"?>
<root>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AwaitXInstead" xml:space="preserve">
    <value>Attendre {0} à la place</value>
    <comment>"await" is a C# keyword and should not be translated.
{0} is a method name.</comment>
  </data>
  <data name="UseAwaitInstead" xml:space="preserve">
    <value>Utiliser await à la place</value>
    <comment>"await" is a C# keyword and should not be translated.</comment>
  </data>
  <data name="VSTHRD002_MessageFormat" xml:space="preserve">
    <value>L'attente de manière synchrone de tâches ou d’éléments en attente peut entraîner des blocages. Utilisez await ou JoinableTaskFactory.Run à la place.</value>
    <comment>"await" is a C# keyword and should not be translated.</comment>
  </data>
  <data name="VSTHRD002_Title" xml:space="preserve">
    <value>Éviter les attentes synchrones problématiques</value>
  </data>
  <data name="VSTHRD010_Title" xml:space="preserve">
    <value>Appeler les types à thread unique sur le thread principal</value>
  </data>
  <data name="VSTHRD100_MessageFormat" xml:space="preserve">
    <value>Évitez les méthodes "async void", car toute exception non traitée par la méthode bloque le processus.</value>
    <comment>"async void" is a pair of C# keywords. Do not translate them.</comment>
  </data>
  <data name="VSTHRD100_Title" xml:space="preserve">
    <value>Éviter les méthodes async void</value>
    <comment>"async void" is a pair of C# keywords. Do not translate them.</comment>
  </data>
  <data name="VSTHRD101_MessageFormat" xml:space="preserve">
    <value>Évitez d’utiliser une expression lambda asynchrone pour un type de délégué retournant void, car toute exception non traitée par la méthode bloque le processus.</value>
    <comment>"void" is a C# keyword and should not be translated.</comment>
  </data>
  <data name="VSTHRD101_Title" xml:space="preserve">
    <value>Éviter les délégués async non pris en charge</value>
  </data>
  <data name="VSTHRD106_MessageFormat" xml:space="preserve">
    <value>Les délégués AsyncEventHandler doivent être appelés avec la méthode d’extension "TplExtensions.InvokeAsync()" définie dans l’assembly Microsoft.VisualStudio.Threading.</value>
  </data>
  <data name="VSTHRD106_Title" xml:space="preserve">
    <value>Utiliser InvokeAsync pour déclencher des événements async</value>
  </data>
  <data name="VSTHRD003_MessageFormat" xml:space="preserve">
    <value>Le fait d’appeler await sur une tâche dans une méthode JoinableTaskFactory.Run quand la tâche est initialisée en dehors du délégué peut entraîner des blocages.
Vous pouvez éviter ce problème en vérifiant que la tâche est initialisée dans le délégué ou en utilisant JoinableTask à la place de Task.</value>
  </data>
  <data name="VSTHRD003_Title" xml:space="preserve">
    <value>Éviter d’attendre des tâches non joignables dans des contextes de jointure</value>
  </data>
  <data name="VSTHRD011_MessageFormat" xml:space="preserve">
    <value>Lazy&lt;Task&lt;T&gt;&gt;.Value peut entraîner un blocage.
Utilisez AsyncLazy&lt;T&gt; à la place</value>
  </data>
  <data name="VSTHRD011_Title" xml:space="preserve">
    <value>Utiliser AsyncLazy&lt;T&gt;</value>
  </data>
  <data name="VSTHRD103_MessageFormat" xml:space="preserve">
    <value>{0} bloque de façon synchrone. Attendez {1} à la place.</value>
  </data>
  <data name="VSTHRD103_MessageFormat_UseAwaitInstead" xml:space="preserve">
    <value>{0} bloque de façon synchrone. Utilisez await à la place</value>
  </data>
  <data name="VSTHRD103_Title" xml:space="preserve">
    <value>Appeler des méthodes async dans une méthode async</value>
  </data>
  <data name="VSTHRD102_MessageFormat" xml:space="preserve">
    <value>Limitez l'utilisation des appels de méthode de blocage synchrones, comme JoinableTaskFactory.Run ou Task.Result, aux membres de point d’entrée publics où il est nécessaire d’être synchrone. Son utilisation pour des membres internes peut inutilement ajouter des frames synchrones entre les frames asynchrones, provoquant l'épuisement du pool de threads.</value>
  </data>
  <data name="VSTHRD102_Title" xml:space="preserve">
    <value>Implémenter la logique interne de façon asynchrone</value>
  </data>
  <data name="VSTHRD200_CodeFix_Title" xml:space="preserve">
    <value>Renommer en {0}</value>
    <comment>{0} is a method name.</comment>
  </data>
  <data name="VSTHRD200_Title" xml:space="preserve">
    <value>Utiliser le suffixe "Async" pour les méthodes asynchrones</value>
  </data>
  <data name="VSTHRD100_CodeFix_Title" xml:space="preserve">
    <value>Remplacer le type de retour par Task</value>
    <comment>Task is a type name and should not be translated.</comment>
  </data>
  <data name="VSTHRD105_MessageFormat" xml:space="preserve">
    <value>Évitez les surcharges de méthode qui optent par défaut pour TaskScheduler.Current. Utilisez une surcharge qui accepte un TaskScheduler et spécifiez TaskScheduler.Default (ou autre chose) de manière explicite.</value>
  </data>
  <data name="VSTHRD105_Title" xml:space="preserve">
    <value>Éviter les surcharges de méthode qui optent par défaut pour TaskScheduler.Current</value>
  </data>
  <data name="VSTHRD012_MessageFormat" xml:space="preserve">
    <value>Fournissez une instance de JoinableTaskFactory dans cet appel (ou une autre surcharge) pour éviter les blocages avec le même thread.</value>
  </data>
  <data name="VSTHRD012_Title" xml:space="preserve">
    <value>Fournir JoinableTaskFactory quand autorisé</value>
  </data>
  <data name="VSTHRD104_MessageFormat" xml:space="preserve">
    <value>Exposez une version asynchrone de cette méthode qui ne se bloque pas de manière synchrone. Ensuite, simplifiez cette méthode pour appeler cette méthode async dans un délégué JoinableTaskFactory.Run.</value>
  </data>
  <data name="VSTHRD104_Title" xml:space="preserve">
    <value>Offrir des méthodes async</value>
  </data>
  <data name="VSTHRD001_MessageFormat" xml:space="preserve">
    <value>Attendez que JoinableTaskFactory.SwitchToMainThreadAsync() passe au thread d'interface utilisateur au lieu des API susceptibles de se bloquer ou de demander une priorité.</value>
  </data>
  <data name="VSTHRD001_Title" xml:space="preserve">
    <value>Éviter les API de commutation de thread héritées</value>
    <comment>thread switching APIs refers to Visual Studio SDK or .NET methods that can be used to switch threads, but are obsolete and should be avoided.</comment>
  </data>
  <data name="VSTHRD107_MessageFormat" xml:space="preserve">
    <value>Opérateur await manquant pour l’expression "using".</value>
    <comment>"await" and "using" are C# keywords and should not be translated.</comment>
  </data>
  <data name="VSTHRD107_Title" xml:space="preserve">
    <value>Tâche Await dans l’expression using</value>
    <comment>"await Task" is a C# compound term, and "using" is a C# keyword. These should not be translated.</comment>
  </data>
  <data name="VSTHRD107_CodeFix_Title" xml:space="preserve">
    <value>Attendre l’expression using</value>
    <comment>"await" and "using" are C# keywords and should not be translated.</comment>
  </data>
  <data name="VSTHRD002_CodeFix_Await_Title" xml:space="preserve">
    <value>Utiliser await à la place</value>
    <comment>"await" is a C# keyword and should not be translated.</comment>
  </data>
  <data name="VSTHRD108_MessageFormat" xml:space="preserve">
    <value>Les vérifications d'affinité de thread doivent être inconditionnelles.</value>
  </data>
  <data name="VSTHRD108_Title" xml:space="preserve">
    <value>Effectuer l'assertion de l'affinité de thread de manière inconditionnelle</value>
  </data>
  <data name="VSTHRD109_MessageFormat" xml:space="preserve">
    <value>Évitez toute levée quand vous n'êtes pas sur the thread principal dans une méthode retournant async ou Task. Basculez plutôt sur le thread requis.</value>
  </data>
  <data name="VSTHRD109_Title" xml:space="preserve">
    <value>Basculer sur des méthodes async plutôt qu'assert</value>
  </data>
  <data name="VSTHRD010_MessageFormat_Sync" xml:space="preserve">
    <value>L'accès à "{0}" doit être uniquement effectué sur le thread principal. Appelez d'abord {1}().</value>
    <comment>{0} is a type or member name and {1} is the name of a method that throws if not called from the main thread.</comment>
  </data>
  <data name="VSTHRD010_MessageFormat_Async" xml:space="preserve">
    <value>L'accès à "{0}" doit être uniquement effectué sur le thread principal. Attendez d'abord JoinableTaskFactory.SwitchToMainThreadAsync().</value>
    <comment>{0} is a type or member name.</comment>
  </data>
  <data name="VSTHRD004_MessageFormat" xml:space="preserve">
    <value>Vous devez attendre les appels à JoinableTaskFactory.SwitchToMainThreadAsync().</value>
  </data>
  <data name="VSTHRD004_Title" xml:space="preserve">
    <value>Attendre SwitchToMainThreadAsync</value>
    <comment>Do not translate either of these. The first is a keyword, the second is a method name.</comment>
  </data>
  <data name="VSTHRD110_MessageFormat" xml:space="preserve">
    <value>Observez le résultat pouvant être attendu de cet appel de méthode en l'attendant, en l'assignant à une variable ou en le passant à une autre méthode.</value>
  </data>
  <data name="VSTHRD110_Title" xml:space="preserve">
    <value>Observer le résultat des appels async</value>
  </data>
  <data name="VSTHRD011b_MessageFormat" xml:space="preserve">
    <value>Les appels ou blocages sur le code async dans une fabrique de valeurs Lazy&lt;T&gt; peuvent faire l'objet d'un interblocage.
Utilisez plutôt AsyncLazy&lt;T&gt;.</value>
  </data>
  <data name="VSTHRD200_AddAsync_MessageFormat" xml:space="preserve">
    <value>Utilisez le suffixe "Async" dans les noms des méthodes qui retournent un type awaitable.</value>
  </data>
  <data name="VSTHRD200_RemoveAsync_MessageFormat" xml:space="preserve">
    <value>Évitez le suffixe "Async" dans les noms des méthodes qui ne retournent pas un type awaitable</value>
  </data>
  <data name="VSTHRD111_CodeFix_False_Title" xml:space="preserve">
    <value>Ajouter .ConfigureAwait(false)</value>
    <comment>".ConfigureAwait(false)" should not be translated.</comment>
  </data>
  <data name="VSTHRD111_CodeFix_True_Title" xml:space="preserve">
    <value>Ajouter .ConfigureAwait(true)</value>
    <comment>".ConfigureAwait(true)" should not be translated.</comment>
  </data>
  <data name="VSTHRD111_MessageFormat" xml:space="preserve">
    <value>Ajoutez .ConfigureAwait(bool) à votre expression await.</value>
    <comment>".ConfigureAwait(bool)" and "await" should NOT be translated.</comment>
  </data>
  <data name="VSTHRD111_Title" xml:space="preserve">
    <value>Utiliser ConfigureAwait(bool)</value>
    <comment>"ConfigureAwait(bool)" is a reference and should NOT be translated.</comment>
  </data>
</root>