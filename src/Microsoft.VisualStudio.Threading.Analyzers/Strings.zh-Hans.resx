<?xml version="1.0" encoding="utf-8"?>
<root>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AwaitXInstead" xml:space="preserve">
    <value>改为 await {0}</value>
    <comment>"await" is a C# keyword and should not be translated.
{0} is a method name.</comment>
  </data>
  <data name="UseAwaitInstead" xml:space="preserve">
    <value>改用 await</value>
    <comment>"await" is a C# keyword and should not be translated.</comment>
  </data>
  <data name="VSTHRD002_MessageFormat" xml:space="preserve">
    <value>同步等待任务或 awaiter 可能导致死锁。请等待或改用 JoinableTaskFactory.Run。</value>
    <comment>"await" is a C# keyword and should not be translated.</comment>
  </data>
  <data name="VSTHRD002_Title" xml:space="preserve">
    <value>避免有问题的同步等待</value>
  </data>
  <data name="VSTHRD010_Title" xml:space="preserve">
    <value>在主线程上调用单线程类型</value>
  </data>
  <data name="VSTHRD100_MessageFormat" xml:space="preserve">
    <value>避免使用“Async Void”方法，因为此方法未处理的任何异常都将导致进程故障。</value>
    <comment>"async void" is a pair of C# keywords. Do not translate them.</comment>
  </data>
  <data name="VSTHRD100_Title" xml:space="preserve">
    <value>避免使用 Async Void 方法</value>
    <comment>"async void" is a pair of C# keywords. Do not translate them.</comment>
  </data>
  <data name="VSTHRD101_MessageFormat" xml:space="preserve">
    <value>避免对返回委托类型的 void 使用异步 lambda，因为此委托未处理的任何异常都将导致进程故障。</value>
    <comment>"void" is a C# keyword and should not be translated.</comment>
  </data>
  <data name="VSTHRD101_Title" xml:space="preserve">
    <value>避免不支持的异步委托</value>
  </data>
  <data name="VSTHRD106_MessageFormat" xml:space="preserve">
    <value>应通过 Microsoft.VisualStudio.Threading 程序集中定义的扩展方法“TplExtensions.InvokeAsync()”调用 AsyncEventHandler 委托。</value>
  </data>
  <data name="VSTHRD106_Title" xml:space="preserve">
    <value>使用 InvokeAsync 引发异步事件</value>
  </data>
  <data name="VSTHRD003_MessageFormat" xml:space="preserve">
    <value>在委托外初始化任务时，对 JoinableTaskFactory.Run 内部 Task 调用 await 可能导致死锁。
通过确保在委托内部初始化任务或使用 JoinableTask 取代 Task，可以避免此问题。</value>
  </data>
  <data name="VSTHRD003_Title" xml:space="preserve">
    <value>避免等待联接上下文中的非可加入任务</value>
  </data>
  <data name="VSTHRD011_MessageFormat" xml:space="preserve">
    <value>Lazy&lt;Task&lt;T&gt;&gt;.Value 可能死锁。
改用 AsyncLazy&lt;T&gt;。</value>
  </data>
  <data name="VSTHRD011_Title" xml:space="preserve">
    <value>使用 AsyncLazy&lt;T&gt;</value>
  </data>
  <data name="VSTHRD103_MessageFormat" xml:space="preserve">
    <value>{0} 同步阻止。改为 await {1}。</value>
  </data>
  <data name="VSTHRD103_MessageFormat_UseAwaitInstead" xml:space="preserve">
    <value>{0} 同步阻止。改用 await。</value>
  </data>
  <data name="VSTHRD103_Title" xml:space="preserve">
    <value>当在异步方法中时，调用异步方法</value>
  </data>
  <data name="VSTHRD102_MessageFormat" xml:space="preserve">
    <value>当必须为同步时，仅限公共入口点成员使用同步阻止方法调用，如 JoinableTaskFactory.Run 或 Task.Result。将其用于内部成员会在异步框架间添加多余同步框架，进而导致线程池枯竭。</value>
  </data>
  <data name="VSTHRD102_Title" xml:space="preserve">
    <value>异步实现内部逻辑</value>
  </data>
  <data name="VSTHRD200_CodeFix_Title" xml:space="preserve">
    <value>重命名为 {0}</value>
    <comment>{0} is a method name.</comment>
  </data>
  <data name="VSTHRD200_Title" xml:space="preserve">
    <value>对异步方法使用“Async”后缀</value>
  </data>
  <data name="VSTHRD100_CodeFix_Title" xml:space="preserve">
    <value>将返回类型更改为 Task</value>
    <comment>Task is a type name and should not be translated.</comment>
  </data>
  <data name="VSTHRD105_MessageFormat" xml:space="preserve">
    <value>避免假定 TaskScheduler.Current 的方法重载。使用接受 TaskScheduler 的重载并显式指定 TaskScheduler.Default（或其他方法）。</value>
  </data>
  <data name="VSTHRD105_Title" xml:space="preserve">
    <value>避免假定 TaskScheduler.Current 的方法重载</value>
  </data>
  <data name="VSTHRD012_MessageFormat" xml:space="preserve">
    <value>在此调用中提供 JoinableTaskFactory 的实例（或其他重载）以避免主线程死锁。</value>
  </data>
  <data name="VSTHRD012_Title" xml:space="preserve">
    <value>在允许的地方提供 JoinableTaskFactory</value>
  </data>
  <data name="VSTHRD104_MessageFormat" xml:space="preserve">
    <value>公开此方法的异步版（不同步阻止）。然后简化此方法以在 JoinableTaskFactory.Run 委托内调用该异步方法。</value>
  </data>
  <data name="VSTHRD104_Title" xml:space="preserve">
    <value>提供异步方法</value>
  </data>
  <data name="VSTHRD001_MessageFormat" xml:space="preserve">
    <value>等待 JoinableTaskFactory.SwitchToMainThreadAsync() 切换到 UI 线程，而非切换到可死锁或要求指定优先级的 API。</value>
  </data>
  <data name="VSTHRD001_Title" xml:space="preserve">
    <value>避免旧线程切换 API</value>
    <comment>thread switching APIs refers to Visual Studio SDK or .NET methods that can be used to switch threads, but are obsolete and should be avoided.</comment>
  </data>
  <data name="VSTHRD107_MessageFormat" xml:space="preserve">
    <value>"using" 表达式缺少 await 运算符。</value>
    <comment>"await" and "using" are C# keywords and should not be translated.</comment>
  </data>
  <data name="VSTHRD107_Title" xml:space="preserve">
    <value>using 表达式中的 Await Task</value>
    <comment>"await Task" is a C# compound term, and "using" is a C# keyword. These should not be translated.</comment>
  </data>
  <data name="VSTHRD107_CodeFix_Title" xml:space="preserve">
    <value>等待 using 表达式</value>
    <comment>"await" and "using" are C# keywords and should not be translated.</comment>
  </data>
  <data name="VSTHRD002_CodeFix_Await_Title" xml:space="preserve">
    <value>改用 await</value>
    <comment>"await" is a C# keyword and should not be translated.</comment>
  </data>
  <data name="VSTHRD108_MessageFormat" xml:space="preserve">
    <value>应无条件检查线程关联。</value>
  </data>
  <data name="VSTHRD108_Title" xml:space="preserve">
    <value>无条件断言线程关联</value>
  </data>
  <data name="VSTHRD109_MessageFormat" xml:space="preserve">
    <value>在异步方法或返回任务的方法中，不在主线程上时，避免引发。请切换到要求的线程。</value>
  </data>
  <data name="VSTHRD109_Title" xml:space="preserve">
    <value>在异步方法中切换而不是断言</value>
  </data>
  <data name="VSTHRD010_MessageFormat_Sync" xml:space="preserve">
    <value>只应在主线程中访问“{0}”。请先调用 {1}()。</value>
    <comment>{0} is a type or member name and {1} is the name of a method that throws if not called from the main thread.</comment>
  </data>
  <data name="VSTHRD010_MessageFormat_Async" xml:space="preserve">
    <value>只应在主线程中访问“{0}”。请先等待 JoinableTaskFactory.SwitchToMainThreadAsync()。</value>
    <comment>{0} is a type or member name.</comment>
  </data>
  <data name="VSTHRD004_MessageFormat" xml:space="preserve">
    <value>对 JoinableTaskFactory.SwitchToMainThreadAsync() 的调用必须等待。</value>
  </data>
  <data name="VSTHRD004_Title" xml:space="preserve">
    <value>等待 SwitchToMainThreadAsync</value>
    <comment>Do not translate either of these. The first is a keyword, the second is a method name.</comment>
  </data>
  <data name="VSTHRD110_MessageFormat" xml:space="preserve">
    <value>等待以观察此方法调用的可等待结果、将其分配给变量或传递给其他方法。</value>
  </data>
  <data name="VSTHRD110_Title" xml:space="preserve">
    <value>观察异步调用的结果</value>
  </data>
  <data name="VSTHRD011b_MessageFormat" xml:space="preserve">
    <value>在 Lazy&lt;T&gt; 值工厂中调用或阻止异步代码可能死锁。 请改用 AsyncLazy&lt;T&gt;</value>
  </data>
  <data name="VSTHRD200_AddAsync_MessageFormat" xml:space="preserve">
    <value>如果方法返回可等待的类型，则在其名称中使用 “Async” 语法。</value>
  </data>
  <data name="VSTHRD200_RemoveAsync_MessageFormat" xml:space="preserve">
    <value>如果方法不返回可等待的类型，则不要在其名称中使用 “Async” 语法。</value>
  </data>
  <data name="VSTHRD111_CodeFix_False_Title" xml:space="preserve">
    <value>添加 .ConfigureAwait(false)</value>
    <comment>".ConfigureAwait(false)" should not be translated.</comment>
  </data>
  <data name="VSTHRD111_CodeFix_True_Title" xml:space="preserve">
    <value>添加 .ConfigureAwait(true)</value>
    <comment>".ConfigureAwait(true)" should not be translated.</comment>
  </data>
  <data name="VSTHRD111_MessageFormat" xml:space="preserve">
    <value>向 await 表达式添加 .ConfigureAwait(bool)。</value>
    <comment>".ConfigureAwait(bool)" and "await" should NOT be translated.</comment>
  </data>
  <data name="VSTHRD111_Title" xml:space="preserve">
    <value>使用 ConfigureAwait(bool)</value>
    <comment>"ConfigureAwait(bool)" is a reference and should NOT be translated.</comment>
  </data>
</root>